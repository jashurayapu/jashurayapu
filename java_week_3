import java.io.*;
import java.util.*;
class Expense implements Serializable {
    private String category;
    private double amount;
    private Date date;

    public Expense(String category, double amount, Date date) {
        this.category = category;
        this.amount = amount;
        this.date = date;
    }

    @Override
    public String toString() {
        return "Category: " + category + ", Amount: $" + amount + ", Date: " + date;
    }

    public String getCategory() {
        return category;
    }

    public double getAmount() {
        return amount;
    }

    public Date getDate() {
        return date;
    }
}

public class ExpenseManager {
    private static final String DATA_FILE = "expenses.ser"; // Serialized file for persistence
    private static List<Expense> expenses = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        loadExpenses(); // Load existing expenses from file, if any
        boolean exit = false;
        
        while (!exit) {
            System.out.println("\n1. Register User");
            System.out.println("2. Enter Expense");
            System.out.println("3. List Expenses");
            System.out.println("4. Category-wise Summary");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            
            switch (choice) {
                case 1:
                    registerUser();
                    break;
                case 2:
                    enterExpense();
                    break;
                case 3:
                    listExpenses();
                    break;
                case 4:
                    categoryWiseSummary();
                    break;
                case 5:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice! Please choose again.");
            }
        }
        
        saveExpenses(); // Save expenses to file on exit
        System.out.println("Exiting application...");
    }

    private static void registerUser() {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        // Could implement user registration logic here
        System.out.println("User registered successfully: " + username);
    }

    private static void enterExpense() {
        System.out.print("Enter category: ");
        String category = scanner.nextLine();
        System.out.print("Enter amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume newline
        Date date = new Date(); // Use current date/time for simplicity
        
        Expense expense = new Expense(category, amount, date);
        expenses.add(expense);
        
        System.out.println("Expense added successfully.");
    }

    private static void listExpenses() {
        if (expenses.isEmpty()) {
            System.out.println("No expenses to display.");
        } else {
            System.out.println("List of Expenses:");
            for (Expense expense : expenses) {
                System.out.println(expense);
            }
        }
    }

    private static void categoryWiseSummary() {
        Map<String, Double> categoryMap = new HashMap<>();
        
        for (Expense expense : expenses) {
            String category = expense.getCategory();
            double amount = expense.getAmount();
            
            if (categoryMap.containsKey(category)) {
                categoryMap.put(category, categoryMap.get(category) + amount);
            } else {
                categoryMap.put(category, amount);
            }
        }
        
        System.out.println("Category-wise Summary:");
        for (Map.Entry<String, Double> entry : categoryMap.entrySet()) {
            System.out.println("Category: " + entry.getKey() + ", Total Amount: $" + entry.getValue());
        }
    }

    private static void saveExpenses() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(DATA_FILE))) {
            oos.writeObject(expenses);
            System.out.println("Expenses saved to file.");
        } catch (IOException e) {
            System.err.println("Error saving expenses: " + e.getMessage());
        }
    }

    @SuppressWarnings("unchecked")
    private static void loadExpenses() {
        File file = new File(DATA_FILE);
        if (file.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(DATA_FILE))) {
                expenses = (List<Expense>) ois.readObject();
                System.out.println("Expenses loaded from file.");
            } catch (IOException | ClassNotFoundException e) {
                System.err.println("Error loading expenses: " + e.getMessage());
            }
        }
    }
}
